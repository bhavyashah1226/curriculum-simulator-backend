/*
Test generated by RoostGPT for test javaUnitTest using AI Type Open AI and AI Model gpt-4

1. Scenario: Check if the function returns a list of all courses

   Given that there are multiple courses in the CourseService
   When the function getAllCourses is called
   Then it should return a list of all courses with HttpStatus.OK

2. Scenario: Check if the function returns an empty list when there are no courses

   Given that there are no courses in the CourseService
   When the function getAllCourses is called
   Then it should return an empty list with HttpStatus.OK

3. Scenario: Check if the function returns HttpStatus.OK when called

   When the function getAllCourses is called
   Then it should return HttpStatus.OK regardless of the number of courses

4. Scenario: Check if the function handles exceptions properly

   Given that an exception occurs in the CourseService while getting all courses
   When the function getAllCourses is called
   Then it should handle the exception and not crash the application

5. Scenario: Check if the function returns the courses in the correct format

   Given that there are multiple courses in the CourseService
   When the function getAllCourses is called
   Then it should return the courses in the correct format (as a List of Course objects)

6. Scenario: Check if the function returns the correct number of courses

   Given that there are 'n' number of courses in the CourseService
   When the function getAllCourses is called
   Then it should return a list of 'n' courses.

7. Scenario: Check if the function works correctly with large data sets

   Given that there are a large number of courses in the CourseService
   When the function getAllCourses is called
   Then it should return all the courses without any performance issues.
*/
package alahyaoui.curriculum.controller;

import alahyaoui.curriculum.model.Course;
import alahyaoui.curriculum.service.CourseService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

public class CourseRestController_getAllCourses_2b0890dd04_Test {

    @Mock
    private CourseService courseService;

    private CourseRestController courseRestController;

    @BeforeEach
    public void setUp() throws Exception {
        MockitoAnnotations.initMocks(this);
        this.courseRestController = new CourseRestController(courseService);
    }

    @Test
    public void testGetAllCourses_returnsListOfAllCourses() {
        Course course1 = new Course();
        Course course2 = new Course();
        when(courseService.getAllCourses()).thenReturn(Arrays.asList(course1, course2));

        ResponseEntity<List<Course>> response = courseRestController.getAllCourses();

        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals(2, response.getBody().size());
        verify(courseService, times(1)).getAllCourses();
    }

    @Test
    public void testGetAllCourses_returnsEmptyListWhenNoCourses() {
        when(courseService.getAllCourses()).thenReturn(Collections.emptyList());

        ResponseEntity<List<Course>> response = courseRestController.getAllCourses();

        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals(0, response.getBody().size());
        verify(courseService, times(1)).getAllCourses();
    }

    @Test
    public void testGetAllCourses_returnsHttpStatusOK() {
        when(courseService.getAllCourses()).thenReturn(Collections.emptyList());

        ResponseEntity<List<Course>> response = courseRestController.getAllCourses();

        assertEquals(HttpStatus.OK, response.getStatusCode());
        verify(courseService, times(1)).getAllCourses();
    }

    @Test
    public void testGetAllCourses_handlesExceptionsProperly() {
        when(courseService.getAllCourses()).thenThrow(new RuntimeException());

        try {
            courseRestController.getAllCourses();
        } catch (Exception e) {
            // Expected exception
        }

        verify(courseService, times(1)).getAllCourses();
    }
}
