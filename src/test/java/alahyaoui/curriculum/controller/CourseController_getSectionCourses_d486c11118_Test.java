/*
Test generated by RoostGPT for test javaUnitTest using AI Type Open AI and AI Model gpt-4

1. Check if the function returns the expected view name "course_result".
2. Check if the function correctly adds courses and section to the model.
3. Check if the function correctly retrieves courses related to the given section.
4. Check if the function behaves as expected when the section does not exist.
5. Check if the function behaves as expected when there are no courses in the given section.
6. Check if the function behaves as expected when the section contains multiple courses.
7. Check if the function behaves as expected when the section contains one course.
8. Check if the function handles null values correctly. What happens when a null section is passed? 
9. Check if the function behaves as expected when the section passed is empty.
10. Check how the function behaves when the section contains courses with similar names or duplicate courses.
11. Check how the function behaves when the section contains courses with different names.
12. Check if the function retrieves courses in the order they are added to the section.
13. Check if the function behaves as expected when special characters or numbers are used in the section or course names.
14. Check the function's behavior when the section and courses contain a large amount of data.
*/
package alahyaoui.curriculum.controller;

import alahyaoui.curriculum.model.Course;
import alahyaoui.curriculum.model.Section;
import alahyaoui.curriculum.service.CourseService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;
import org.springframework.ui.Model;
import org.springframework.test.util.ReflectionTestUtils;

import java.util.ArrayList;
import java.util.List;

class CourseController_getSectionCourses_d486c11118_Test {

    private CourseController courseController;
    private CourseService courseService;
    private Model model;

    @BeforeEach
    void setUp() {
        courseController = new CourseController();
        courseService = mock(CourseService.class);
        model = mock(Model.class);

        ReflectionTestUtils.setField(courseController, "courseService", courseService);
    }

    @Test
    void testGetSectionCourses() {
        Section section = new Section();
        List<Course> courses = new ArrayList<>();
        courses.add(new Course());
        when(courseService.getSectionCourses(section)).thenReturn(courses);

        String view = courseController.getSectionCourses(model, section);

        verify(model).addAttribute("courses", courses);
        verify(model).addAttribute("section", section);
        assertEquals("course_result", view);
    }

    @Test
    void testGetSectionCourses_noCourses() {
        Section section = new Section();
        List<Course> courses = new ArrayList<>();
        when(courseService.getSectionCourses(section)).thenReturn(courses);

        String view = courseController.getSectionCourses(model, section);

        verify(model).addAttribute("courses", courses);
        verify(model).addAttribute("section", section);
        assertEquals("course_result", view);
    }
}
