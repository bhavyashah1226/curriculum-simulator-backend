/*
Test generated by RoostGPT for test javaUnitTest using AI Type Open AI and AI Model gpt-4

Test Scenario 1: Test when the courseService returns an empty list
- Description: This scenario will test the function when the courseService returns an empty list of courses. The test will verify if the function can handle this edge case and whether the model attribute "courses" is empty as expected.

Test Scenario 2: Test when the courseService returns a list with one course
- Description: This scenario will test the function when the courseService returns a list containing one course. The test will verify if the function correctly adds this course to the model attribute "courses".

Test Scenario 3: Test when the courseService returns a list with multiple courses
- Description: This scenario will test the function when the courseService returns a list containing multiple courses. The test will verify if the function correctly adds all these courses to the model attribute "courses".

Test Scenario 4: Test the return value of the function
- Description: This scenario will test if the function returns the correct view name "course_result".

Test Scenario 5: Test when the courseService throws an exception
- Description: This scenario will test how the function behaves when the courseService throws an exception. The test will verify whether the function can handle this exception and whether the model attribute "courses" is null or empty.

Test Scenario 6: Test the function with a null model
- Description: This scenario will test how the function behaves when a null model is passed. The test will verify whether the function can handle this edge case and whether it throws the appropriate exception.

Test Scenario 7: Test the function with a non-null but empty model
- Description: This scenario will test how the function behaves when a non-null but empty model is passed. The test will verify whether the function can handle this case and whether it correctly adds the courses to the model.
*/
package alahyaoui.curriculum.controller;

import alahyaoui.curriculum.model.Course;
import alahyaoui.curriculum.service.CourseService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import java.util.ArrayList;
import java.util.List;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.Mockito.when;

public class CourseController_getAllCourses_4e40ac0c58_Test {

    @Mock
    private CourseService courseService;

    private CourseController courseController;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.initMocks(this);
        courseController = new CourseController(courseService);
    }

    @Test
    public void testWhenCourseServiceReturnsEmptyList() {
        Model model = new ModelMap();
        when(courseService.getAllCourses()).thenReturn(new ArrayList<>());

        String viewName = courseController.getAllCourses(model);
        List<Course> courses = (List<Course>) model.getAttribute("courses");

        assertEquals("course_result", viewName);
        assertEquals(0, courses.size());
    }

    @Test
    public void testWhenCourseServiceReturnsListWithOneCourse() {
        Model model = new ModelMap();
        List<Course> oneCourseList = new ArrayList<>();
        oneCourseList.add(new Course());
        when(courseService.getAllCourses()).thenReturn(oneCourseList);

        String viewName = courseController.getAllCourses(model);
        List<Course> courses = (List<Course>) model.getAttribute("courses");

        assertEquals("course_result", viewName);
        assertEquals(1, courses.size());
    }

    @Test
    public void testWhenCourseServiceReturnsListWithMultipleCourses() {
        Model model = new ModelMap();
        List<Course> multipleCoursesList = new ArrayList<>();
        multipleCoursesList.add(new Course());
        multipleCoursesList.add(new Course());
        when(courseService.getAllCourses()).thenReturn(multipleCoursesList);

        String viewName = courseController.getAllCourses(model);
        List<Course> courses = (List<Course>) model.getAttribute("courses");

        assertEquals("course_result", viewName);
        assertEquals(2, courses.size());
    }

    @Test
    public void testWhenCourseServiceThrowsException() {
        Model model = new ModelMap();
        when(courseService.getAllCourses()).thenThrow(new RuntimeException());

        assertThrows(RuntimeException.class, () -> courseController.getAllCourses(model));
    }

    @Test
    public void testWithNullModel() {
        assertThrows(NullPointerException.class, () -> courseController.getAllCourses(null));
    }

    @Test
    public void testWithNonNullButEmptyModel() {
        Model model = new ModelMap();
        when(courseService.getAllCourses()).thenReturn(new ArrayList<>());

        String viewName = courseController.getAllCourses(model);
        List<Course> courses = (List<Course>) model.getAttribute("courses");

        assertEquals("course_result", viewName);
        assertEquals(0, courses.size());
    }
}
