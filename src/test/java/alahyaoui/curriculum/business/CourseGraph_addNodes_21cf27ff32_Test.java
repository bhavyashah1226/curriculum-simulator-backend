/*
Test generated by RoostGPT for test javaUnitTest using AI Type Open AI and AI Model gpt-4

Test Scenario 1: Adding a Single Node
- Create a single CourseNode object and add it to a List of CourseNodes.
- Run the addNodes method using the created List.
- Check if the node has been successfully added to the "this.nodes".

Test Scenario 2: Adding Multiple Nodes
- Create multiple CourseNode objects and add them to a List of CourseNodes.
- Run the addNodes method using the created List.
- Check if all nodes have been successfully added to the "this.nodes".

Test Scenario 3: Adding Duplicate Nodes
- Create a CourseNode and add it to a List of CourseNodes twice.
- Run the addNodes method using the created List.
- Check if the node has been added only once in the "this.nodes" (as Set does not allow duplicates).

Test Scenario 4: Adding Null Node
- Add a null to the List of CourseNodes.
- Run the addNodes method using the created List.
- Check if null has not been added to the "this.nodes" (assuming business logic doesn't allow null nodes).

Test Scenario 5: Adding Nodes to an Already Populated Set
- Create and add a CourseNode to "this.nodes".
- Create another CourseNode and add it to a List of CourseNodes.
- Run the addNodes method using the created List.
- Check if both nodes are present in "this.nodes".

Test Scenario 6: Adding an Empty List
- Run the addNodes method using an empty List of CourseNodes.
- Check if "this.nodes" remains unchanged (assuming it was initially empty or had some nodes).
*/
package alahyaoui.curriculum.business;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class CourseGraph_addNodes_21cf27ff32_Test {
    private CourseGraph courseGraph;
    private Set<CourseNode> nodes;

    @BeforeEach
    public void setup() {
        courseGraph = new CourseGraph();
        nodes = new HashSet<>();
    }

    @Test
    public void testAddSingleNodes() {
        CourseNode node = new CourseNode("1");
        List<CourseNode> nodeList = new ArrayList<>();
        nodeList.add(node);

        courseGraph.addNodes(nodeList);

        nodes.add(node);
        assertEquals(nodes, courseGraph.getNodes());
    }

    @Test
    public void testAddMultipleNodes() {
        CourseNode node1 = new CourseNode("1");
        CourseNode node2 = new CourseNode("2");
        List<CourseNode> nodeList = new ArrayList<>();
        nodeList.add(node1);
        nodeList.add(node2);

        courseGraph.addNodes(nodeList);

        nodes.add(node1);
        nodes.add(node2);
        assertEquals(nodes, courseGraph.getNodes());
    }

    @Test
    public void testAddDuplicateNodes() {
        CourseNode node = new CourseNode("1");
        List<CourseNode> nodeList = new ArrayList<>();
        nodeList.add(node);
        nodeList.add(node);

        courseGraph.addNodes(nodeList);

        nodes.add(node);
        assertEquals(nodes, courseGraph.getNodes());
    }

    @Test
    public void testAddNullNode() {
        List<CourseNode> nodeList = new ArrayList<>();
        nodeList.add(null);

        courseGraph.addNodes(nodeList);

        assertEquals(nodes, courseGraph.getNodes());
    }

    @Test
    public void testAddNodesToPopulatedSet() {
        CourseNode node1 = new CourseNode("1");
        courseGraph.addNode(node1);

        CourseNode node2 = new CourseNode("2");
        List<CourseNode> nodeList = new ArrayList<>();
        nodeList.add(node2);

        courseGraph.addNodes(nodeList);

        nodes.add(node1);
        nodes.add(node2);
        assertEquals(nodes, courseGraph.getNodes());
    }

    @Test
    public void testAddEmptyList() {
        List<CourseNode> nodeList = new ArrayList<>();

        courseGraph.addNodes(nodeList);

        assertEquals(nodes, courseGraph.getNodes());
    }
}
