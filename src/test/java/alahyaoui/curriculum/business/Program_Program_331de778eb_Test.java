/*
Test generated by RoostGPT for test javaUnitTest using AI Type Open AI and AI Model gpt-4

Given the limited context, here are some general test scenarios that could be considered:

1. **Initialization Test Scenario**: Verify that the `Program` constructor properly initializes an empty `coursesToStates` HashMap. 

2. **HashMap Capacity Test Scenario**: Test the `Program` constructor with a large amount of data to check if the HashMap `coursesToStates` can handle it or not.

3. **HashMap Key Uniqueness Test Scenario**: Verify that the HashMap `coursesToStates` maintains the uniqueness of its keys. Adding a duplicate key should not create a new entry.

4. **Null Key or Value Test Scenario**: Test the behavior of the HashMap `coursesToStates` when null keys or values are inserted. In Java, HashMap allows one null key and any number of null values.

5. **HashMap Thread Safety Test Scenario**: Verify if the `coursesToStates` HashMap can handle concurrent modifications. Note that HashMap is not inherently thread-safe.

6. **Serialization and Deserialization Test Scenario**: Verify if the HashMap `coursesToStates` can be serialized and deserialized correctly.

7. **Memory Leak Test Scenario**: Check if the `coursesToStates` HashMap is properly garbage collected when it is no longer in use.

Please note that the test scenarios above are made under several assumptions due to the lack of context. The actual test scenarios may vary depending on the exact requirements and expected behavior of the `Program` class and `coursesToStates` HashMap.
*/
package alahyaoui.curriculum.business;

import alahyaoui.curriculum.dto.CourseStateDto;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

import java.util.HashMap;

public class Program_Program_331de778eb_Test {

    @Test
    public void testProgramInit() {
        Program program = new Program();
        Assertions.assertNotNull(program.getCoursesToStates(), "coursesToStates map is null upon initialization");
        Assertions.assertTrue(program.getCoursesToStates().isEmpty(), "coursesToStates map is not empty upon initialization");
    }

    @Test
    public void testProgramInitWithHashMap() {
        HashMap<String, CourseStateDto> coursesToStates = new HashMap<>();
        Program program = new Program(coursesToStates);
        Assertions.assertEquals(coursesToStates, program.getCoursesToStates(), "coursesToStates map is not equal to the provided map upon initialization");
    }

    @Test
    public void testProgramInitWithNullHashMap() {
        Program program = new Program(null);
        Assertions.assertNull(program.getCoursesToStates(), "coursesToStates map is not null when initialized with null");
    }

    @Test
    public void testProgramInitWithLargeData() {
        HashMap<String, CourseStateDto> coursesToStates = new HashMap<>();
        for (int i = 0; i < 1000000; i++) {
            coursesToStates.put("course" + i, new CourseStateDto());
        }
        Program program = new Program(coursesToStates);
        Assertions.assertEquals(coursesToStates, program.getCoursesToStates(), "coursesToStates map is not equal to the provided map when initialized with large data");
    }
}
