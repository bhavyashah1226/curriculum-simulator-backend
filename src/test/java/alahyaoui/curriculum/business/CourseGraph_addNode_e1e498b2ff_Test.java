/*
Test generated by RoostGPT for test javaUnitTest using AI Type Open AI and AI Model gpt-4

Test Scenario 1: Adding a New Node to an Empty Set
- In this scenario, we will verify if a new node can be successfully added to an empty set. After adding the node, we can check if the size of the set is 1 and that the node exists in the set.

Test Scenario 2: Adding a New Node to a Non-Empty Set
- In this scenario, we will verify if a new node can be successfully added to a non-empty set. We will note down the size of the set before adding the node. After adding the node, we will check if the size of the set is incremented by 1 and that the node exists in the set.

Test Scenario 3: Adding a Duplicate Node
- In this scenario, we verify that adding a node that already exists in the set has no effect on the set. The size of the set should remain the same after trying to add the duplicate node.

Test Scenario 4: Adding Multiple Nodes
- In this scenario, we will verify if multiple nodes can be successfully added to the set. We will note down the size of the set before adding the nodes. After adding the nodes, we will check if the size of the set is incremented by the number of nodes added and that all the nodes exist in the set.

Test Scenario 5: Adding a Null Node
- In this scenario, we will verify the behavior of the function when a null node is added. Depending on the business logic, adding a null node may be disallowed and throw an exception, or the null node may be ignored and have no effect on the set.

Test Scenario 6: Adding a Node with Same Data but Different Instance
- In this scenario, we will verify the behavior of the function when a node with the same data but different instance is added. The size of the set should be incremented by 1 as the node is technically not a duplicate. 

Test Scenario 7: Performance Test
- In this scenario, we will test the performance of the function when adding a large number of nodes. We will monitor the time taken to add the nodes and see if it is within acceptable limits.
*/
package alahyaoui.curriculum.business;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

public class CourseGraph_addNode_e1e498b2ff_Test {

    private CourseGraph courseGraph;
    private CourseNode courseNode1;
    private CourseNode courseNode2;

    @BeforeEach
    public void setup() {
        courseGraph = new CourseGraph();
        courseNode1 = Mockito.mock(CourseNode.class);
        courseNode2 = Mockito.mock(CourseNode.class);
    }

    @Test
    public void testAddNodeToEmptySet() {
        courseGraph.addNode(courseNode1);
        assertEquals(1, courseGraph.getNodes().size());
        assertTrue(courseGraph.getNodes().contains(courseNode1));
    }

    @Test
    public void testAddNodeToNonEmptySet() {
        courseGraph.addNode(courseNode1);
        int sizeBefore = courseGraph.getNodes().size();
        courseGraph.addNode(courseNode2);
        assertEquals(sizeBefore + 1, courseGraph.getNodes().size());
        assertTrue(courseGraph.getNodes().contains(courseNode2));
    }

    @Test
    public void testAddDuplicateNode() {
        courseGraph.addNode(courseNode1);
        int sizeBefore = courseGraph.getNodes().size();
        courseGraph.addNode(courseNode1);
        assertEquals(sizeBefore, courseGraph.getNodes().size());
    }

    @Test
    public void testAddMultipleNodes() {
        List<CourseNode> nodes = List.of(courseNode1, courseNode2);
        int sizeBefore = courseGraph.getNodes().size();
        courseGraph.addNodes(nodes);
        assertEquals(sizeBefore + nodes.size(), courseGraph.getNodes().size());
        assertTrue(courseGraph.getNodes().containsAll(nodes));
    }

    @Test
    public void testAddNullNode() {
        assertThrows(NullPointerException.class, () -> courseGraph.addNode(null));
    }

    @Test
    public void testAddNodeWithSameDataDifferentInstance() {
        CourseNode newNode = new CourseNode("1");
        courseGraph.addNode(courseNode1);
        int sizeBefore = courseGraph.getNodes().size();
        courseGraph.addNode(newNode);
        assertEquals(sizeBefore + 1, courseGraph.getNodes().size());
    }

    @Test
    public void testPerformance() {
        long startTime = System.currentTimeMillis();
        for (int i = 0; i < 100000; i++) {
            CourseNode node = new CourseNode(Integer.toString(i));
            courseGraph.addNode(node);
        }
        long endTime = System.currentTimeMillis();
        assertTrue(endTime - startTime < 5000);
    }
}
