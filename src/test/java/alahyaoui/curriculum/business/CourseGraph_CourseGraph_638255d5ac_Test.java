/*
Test generated by RoostGPT for test javaUnitTest using AI Type Open AI and AI Model gpt-4

1. **Scenario:** Validate that a new CourseGraph object gets created and not null.
   **Test Steps:** 
   - Instantiate a new CourseGraph object
   - Check if the object is not null

2. **Scenario:** Check if the nodes HashSet is not null after creating a new CourseGraph object.
   **Test Steps:**
   - Instantiate a new CourseGraph object
   - Check if the nodes HashSet is not null

3. **Scenario:** Validate that the nodes HashSet is empty after creating a new CourseGraph object.
   **Test Steps:**
   - Instantiate a new CourseGraph object
   - Check if the nodes HashSet is empty

4. **Scenario:** Validate the ability to add a node to the nodes HashSet.
   **Test Steps:**
   - Instantiate a new CourseGraph object
   - Add a node to the nodes HashSet
   - Check if the size of the nodes HashSet is 1

5. **Scenario:** Validate the ability to add multiple nodes to the nodes HashSet.
   **Test Steps:**
   - Instantiate a new CourseGraph object
   - Add multiple nodes to the nodes HashSet
   - Check if the size of the nodes HashSet is equal to the number of nodes added

6. **Scenario:** Validate the ability to remove a node from the nodes HashSet.
   **Test Steps:**
   - Instantiate a new CourseGraph object
   - Add a node to the nodes HashSet
   - Remove the node from the nodes HashSet
   - Check if the nodes HashSet is empty

7. **Scenario:** Validate that adding a duplicate node to the nodes HashSet doesn't increase its size.
   **Test Steps:**
   - Instantiate a new CourseGraph object
   - Add a node to the nodes HashSet
   - Add the same node to the nodes HashSet again
   - Check if the size of the nodes HashSet is still 1

8. **Scenario:** Validate that removing a non-existing node from the nodes HashSet doesn't decrease its size.
   **Test Steps:**
   - Instantiate a new CourseGraph object
   - Add a node to the nodes HashSet
   - Try to remove a different node from the nodes HashSet
   - Check if the size of the nodes HashSet is still 1
*/
package alahyaoui.curriculum.business;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class CourseGraph_CourseGraph_638255d5ac_Test {
    private CourseGraph courseGraph;
    private CourseNode courseNode1;
    private CourseNode courseNode2;

    @BeforeEach
    public void setUp() {
        courseGraph = new CourseGraph();
        courseNode1 = new CourseNode("1");
        courseNode2 = new CourseNode("2");
    }

    @Test
    public void testCourseGraphNotNull() {
        assertNotNull(courseGraph);
    }

    @Test
    public void testNodesNotNull() {
        assertNotNull(courseGraph.getNodes());
    }

    @Test
    public void testNodesIsEmpty() {
        assertTrue(courseGraph.getNodes().isEmpty());
    }

    @Test
    public void testAddNode() {
        courseGraph.addNode(courseNode1);
        assertEquals(1, courseGraph.getNodes().size());
    }

    @Test
    public void testAddNodes() {
        List<CourseNode> nodes = Arrays.asList(courseNode1, courseNode2);
        courseGraph.addNodes(nodes);
        assertEquals(2, courseGraph.getNodes().size());
    }

    @Test
    public void testClear() {
        courseGraph.addNode(courseNode1);
        courseGraph.clear();
        assertTrue(courseGraph.getNodes().isEmpty());
    }

    @Test
    public void testAddDuplicateNode() {
        courseGraph.addNode(courseNode1);
        courseGraph.addNode(courseNode1);
        assertEquals(1, courseGraph.getNodes().size());
    }

    @Test
    public void testRemoveNonExistentNode() {
        courseGraph.addNode(courseNode1);
        courseGraph.getNodes().remove(courseNode2);
        assertEquals(1, courseGraph.getNodes().size());
    }
}
