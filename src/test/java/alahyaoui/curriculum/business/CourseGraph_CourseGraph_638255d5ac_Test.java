/*
Test generated by RoostGPT for test javaUnitTest using AI Type Open AI and AI Model gpt-4

1. **Scenario:** Validate that a new CourseGraph object gets created and not null.
   **Test:** Create a new CourseGraph object and check that it's not null.

2. **Scenario:** Validate that the nodes HashSet is initialized correctly.
   **Test:** Create a new CourseGraph object and check that the nodes HashSet is not null.

3. **Scenario:** Validate that the nodes HashSet is empty upon initialization.
   **Test:** Create a new CourseGraph object and check that the nodes HashSet is empty.

4. **Scenario:** Validate that nodes HashSet can hold values.
   **Test:** Add values to the nodes HashSet of a new CourseGraph object and check that the HashSet contains these values.

5. **Scenario:** Validate that duplicate values cannot be added to the nodes HashSet.
   **Test:** Add a value to the nodes HashSet of a new CourseGraph object, try to add the same value again, and check that the HashSet still only contains one instance of the value.

6. **Scenario:** Validate that the nodes HashSet can be cleared.
   **Test:** Add values to the nodes HashSet of a new CourseGraph object, clear the HashSet, and check that it is empty.

7. **Scenario:** Validate that the size of the nodes HashSet is correct after adding and removing values.
   **Test:** Add values to the nodes HashSet of a new CourseGraph object, remove some values, and check that the size of the HashSet is as expected.

8. **Scenario:** Validate that an Iterator can be obtained from the nodes HashSet.
   **Test:** Get an Iterator from the nodes HashSet of a new CourseGraph object and check that it's not null and can iterate over the HashSet.

9. **Scenario:** Validate that the nodes HashSet can be converted to an array.
   **Test:** Convert the nodes HashSet of a new CourseGraph object to an array and check that the array contains all values from the HashSet.

10. **Scenario:** Validate that the nodes HashSet can be converted to a List.
    **Test:** Convert the nodes HashSet of a new CourseGraph object to a List and check that the List contains all values from the HashSet.
*/
package alahyaoui.curriculum.business;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

import java.util.ArrayList;
import java.util.List;

public class CourseGraph_CourseGraph_638255d5ac_Test {

    private CourseGraph courseGraph;
    private CourseNode courseNode1;
    private CourseNode courseNode2;

    @BeforeEach
    public void setUp() {
        courseGraph = new CourseGraph();
        courseNode1 = new CourseNode("1");
        courseNode2 = new CourseNode("2");
    }

    @Test
    public void testCourseGraphNotNull() {
        assertNotNull(courseGraph);
    }

    @Test
    public void testNodesNotNull() {
        assertNotNull(courseGraph.getNodes());
    }

    @Test
    public void testNodesEmptyOnInitialization() {
        assertTrue(courseGraph.getNodes().isEmpty());
    }

    @Test
    public void testNodesCanHoldValues() {
        courseGraph.addNode(courseNode1);
        assertTrue(courseGraph.getNodes().contains(courseNode1));
    }

    @Test
    public void testNodesNoDuplicates() {
        courseGraph.addNode(courseNode1);
        courseGraph.addNode(courseNode1);
        assertEquals(1, courseGraph.getNodes().size());
    }

    @Test
    public void testNodesCanClear() {
        courseGraph.addNode(courseNode1);
        courseGraph.clear();
        assertTrue(courseGraph.getNodes().isEmpty());
    }

    @Test
    public void testNodesSizeAfterAddAndRemove() {
        courseGraph.addNode(courseNode1);
        courseGraph.addNode(courseNode2);
        courseGraph.getNodes().remove(courseNode1);
        assertEquals(1, courseGraph.getNodes().size());
    }

    @Test
    public void testNodesIteratorNotNull() {
        courseGraph.addNode(courseNode1);
        assertNotNull(courseGraph.getNodes().iterator());
    }

    @Test
    public void testNodesToArrayContainsAllValues() {
        courseGraph.addNode(courseNode1);
        courseGraph.addNode(courseNode2);
        Object[] nodesArray = courseGraph.getNodes().toArray();
        assertTrue(courseGraph.getNodes().containsAll(List.of(nodesArray)));
    }

    @Test
    public void testNodesToListContainsAllValues() {
        courseGraph.addNode(courseNode1);
        courseGraph.addNode(courseNode2);
        List<CourseNode> nodesList = new ArrayList<>(courseGraph.getNodes());
        assertTrue(courseGraph.getNodes().containsAll(nodesList));
    }
}
