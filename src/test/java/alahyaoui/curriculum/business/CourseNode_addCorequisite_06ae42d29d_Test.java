/*
Test generated by RoostGPT for test javaUnitTest using AI Type Open AI and AI Model gpt-4

1. Scenario: Adding a Corequisite to an Empty Set
   Test if a `CourseNode` can be successfully added to an empty set of corequisites. 

2. Scenario: Adding a Corequisite to a Non-Empty Set
   Test if a `CourseNode` can be successfully added to a non-empty set of corequisites.

3. Scenario: Adding a Duplicate Corequisite
   Since a `HashSet` does not allow duplicate values, test if adding a duplicate `CourseNode` to the set of corequisites does not increase the size of the set.

4. Scenario: Adding a Null Corequisite
   Test what happens when a `null` `CourseNode` is added to the set of corequisites. The function should handle this gracefully.

5. Scenario: Adding Multiple Corequisites
   Test if multiple `CourseNode` objects can be successfully added to the set of corequisites. 

6. Scenario: Adding Corequisites of Different Types
   If `CourseNode` has subclasses, test if corequisites of different types can be added to the set.

7. Scenario: Adding a Large Number of Corequisites
   Test the performance of the function when a large number of corequisites are added. 

8. Scenario: Adding a Corequisite and Checking Order
   Since a `HashSet` does not maintain insertion order, test if the order of the corequisites in the set does not match the order in which they were added.

9. Scenario: Adding a Corequisite and Removing it
   Test if a `CourseNode` can be successfully added and then removed from the set of corequisites.

10. Scenario: Adding a Corequisite and Checking its Existence
    Test if a `CourseNode` can be successfully added to the set and verify its existence in the set.
*/
package alahyaoui.curriculum.business;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Assertions;
import java.util.HashSet;
import java.util.Set;

public class CourseNode_addCorequisite_06ae42d29d_Test {

    private CourseNode courseNode;
    private CourseNode corequisite1;
    private CourseNode corequisite2;

    @BeforeEach
    public void setup() {
        courseNode = new CourseNode("1");
        corequisite1 = new CourseNode("2");
        corequisite2 = new CourseNode("3");
    }

    @Test
    public void testAddCorequisiteToEmptySet() {
        courseNode.addCorequisite(corequisite1);
        Assertions.assertEquals(1, courseNode.getCorequisites().size());
    }

    @Test
    public void testAddCorequisiteToNonEmptySet() {
        courseNode.addCorequisite(corequisite1);
        courseNode.addCorequisite(corequisite2);
        Assertions.assertEquals(2, courseNode.getCorequisites().size());
    }

    @Test
    public void testAddDuplicateCorequisite() {
        courseNode.addCorequisite(corequisite1);
        courseNode.addCorequisite(corequisite1);
        Assertions.assertEquals(1, courseNode.getCorequisites().size());
    }

    @Test
    public void testAddNullCorequisite() {
        Assertions.assertThrows(NullPointerException.class, () -> {
            courseNode.addCorequisite(null);
        });
    }

    @Test
    public void testAddMultipleCorequisites() {
        Set<CourseNode> corequisites = new HashSet<>();
        for (int i = 0; i < 5; i++) {
            CourseNode corequisite = new CourseNode(String.valueOf(i));
            corequisites.add(corequisite);
            courseNode.addCorequisite(corequisite);
        }
        Assertions.assertEquals(corequisites.size(), courseNode.getCorequisites().size());
    }

    @Test
    public void testAddAndRemoveCorequisite() {
        courseNode.addCorequisite(corequisite1);
        Assertions.assertEquals(1, courseNode.getCorequisites().size());
        courseNode.removeCorequisite(corequisite1);
        Assertions.assertEquals(0, courseNode.getCorequisites().size());
    }

    @Test
    public void testAddCorequisiteAndCheckExistence() {
        courseNode.addCorequisite(corequisite1);
        Assertions.assertTrue(courseNode.getCorequisites().contains(corequisite1));
    }
}
