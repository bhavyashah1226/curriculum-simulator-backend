/*
Test generated by RoostGPT for test javaUnitTest using AI Type Open AI and AI Model gpt-4

Here are some test scenarios for the search function:

1. **Scenario: Valid id exists in nodes**
    - Given a set of CourseNodes with unique ids
    - When the search function is called with an id that exists in the set
    - Then the function should return the CourseNode with the matching id.
  
2. **Scenario: Valid id does not exist in nodes**
    - Given a set of CourseNodes with unique ids
    - When the search function is called with an id that does not exist in the set
    - Then the function should return null.
  
3. **Scenario: Search with null id**
    - Given a set of CourseNodes with unique ids
    - When the search function is called with null as the id
    - Then the function should return null.
  
4. **Scenario: Empty nodes list**
    - Given an empty set of CourseNodes
    - When the search function is called with any id
    - Then the function should return null.
  
5. **Scenario: Multiple nodes with same id**
    - Given a set of CourseNodes with duplicate ids
    - When the search function is called with an id that is duplicated
    - Then the function should return the first CourseNode with the matching id it encounters.
  
6. **Scenario: Search with id with leading/trailing whitespaces**
    - Given a set of CourseNodes with unique ids
    - When the search function is called with an id that has leading or trailing whitespaces
    - Then the function should return null, as the id does not exactly match any of the CourseNode ids.

7. **Scenario: Search with Case-Sensitive id**
    - Given a set of CourseNodes with unique ids
    - When the search function is called with an id that is different in case
    - Then the function should return null, as the id does not exactly match any of the CourseNode ids.
  
8. **Scenario: Nodes list is null**
    - Given a null set of CourseNodes
    - When the search function is called with any id
    - Then an exception should be thrown.
*/
package alahyaoui.curriculum.business;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertThrows;

import java.util.ArrayList;
import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

public class CourseGraph_search_fd8423eeca_Test {
    private CourseGraph courseGraph;
    private CourseNode courseNode1;
    private CourseNode courseNode2;
    private CourseNode courseNode3;

    @BeforeEach
    public void setUp() {
        courseGraph = new CourseGraph();
        courseNode1 = new CourseNode("1");
        courseNode2 = new CourseNode("2");
        courseNode3 = new CourseNode("3");
        List<CourseNode> nodes = new ArrayList<>();
        nodes.add(courseNode1);
        nodes.add(courseNode2);
        nodes.add(courseNode3);
        courseGraph.addNodes(nodes);
    }

    @Test
    public void testSearch_ValidIdExistsInNodes() {
        CourseNode result = courseGraph.search("1");
        assertEquals(courseNode1, result);
    }

    @Test
    public void testSearch_ValidIdDoesNotExistInNodes() {
        CourseNode result = courseGraph.search("4");
        assertNull(result);
    }

    @Test
    public void testSearch_NullId() {
        CourseNode result = courseGraph.search(null);
        assertNull(result);
    }

    @Test
    public void testSearch_EmptyNodesList() {
        courseGraph.clear();
        CourseNode result = courseGraph.search("1");
        assertNull(result);
    }

    @Test
    public void testSearch_IdWithLeadingTrailingWhitespaces() {
        CourseNode result = courseGraph.search(" 1 ");
        assertNull(result);
    }

    @Test
    public void testSearch_CaseSensitiveId() {
        CourseNode result = courseGraph.search("A");
        assertNull(result);
    }

    @Test
    public void testSearch_NodesListIsNull() {
        courseGraph = null;
        assertThrows(NullPointerException.class, () -> {
            courseGraph.search("1");
        });
    }
}
