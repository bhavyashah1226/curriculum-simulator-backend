/*
Test generated by RoostGPT for test javaUnitTest using AI Type Open AI and AI Model gpt-4

1. Check if the constructor correctly initializes an empty map when an empty list of courses is passed.
2. Check if the constructor correctly initializes a map with the expected size when a non-empty list of courses is passed.
3. Check if the constructor correctly maps each course's ID to a new CourseStateDto object when a non-empty list of courses is passed.
4. Check if the constructor handles null values in the list of courses correctly, i.e., it should not throw a NullPointerException.
5. Check if the constructor correctly handles a null list of courses, i.e., it should not throw a NullPointerException.
6. Check if the constructor correctly handles duplicate course IDs, i.e., it should overwrite the previous CourseStateDto object with a new one.
7. Check if the constructor correctly handles courses with null IDs, i.e., it should not throw a NullPointerException.
8. Check if the constructor correctly handles a large number of courses, i.e., it should not run out of memory or take an unreasonably long time.
9. Check if the constructor correctly handles courses with very long IDs, i.e., it should not throw an exception or take an unreasonably long time.
10. Check if the constructor correctly handles courses with very short (including empty) IDs, i.e., it should not throw an exception.
11. Check if the constructor correctly handles courses with special characters in their IDs, i.e., it should not throw an exception.
*/
package alahyaoui.curriculum.business;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertThrows;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import alahyaoui.curriculum.dto.CourseStateDto;
import alahyaoui.curriculum.model.Course;

public class Program_Program_81607475be_Test {
    private Program program;
    private List<Course> courses;

    @BeforeEach
    public void setup() {
        courses = new ArrayList<>();
    }

    @Test
    public void testProgramConstructorWithEmptyList() {
        program = new Program(courses);
        assertNotNull(program.getCoursesToStates());
        assertEquals(0, program.getCoursesToStates().size());
    }

    @Test
    public void testProgramConstructorWithNonNullList() {
        courses.add(new Course("1"));
        courses.add(new Course("2"));
        program = new Program(courses);
        assertNotNull(program.getCoursesToStates());
        assertEquals(2, program.getCoursesToStates().size());
    }

    @Test
    public void testProgramConstructorWithNullValuesInList() {
        courses.add(null);
        assertThrows(NullPointerException.class, () -> new Program(courses));
    }

    @Test
    public void testProgramConstructorWithNullList() {
        assertThrows(NullPointerException.class, () -> new Program(null));
    }

    @Test
    public void testProgramConstructorWithDuplicateCourseIds() {
        courses.add(new Course("1"));
        courses.add(new Course("1"));
        program = new Program(courses);
        assertNotNull(program.getCoursesToStates());
        assertEquals(1, program.getCoursesToStates().size());
    }

    @Test
    public void testProgramConstructorWithNullCourseIds() {
        assertThrows(NullPointerException.class, () -> courses.add(new Course(null)));
    }

    @Test
    public void testProgramConstructorWithLargeNumberOfCourses() {
        for (int i = 0; i < 10000; i++) {
            courses.add(new Course(String.valueOf(i)));
        }
        program = new Program(courses);
        assertNotNull(program.getCoursesToStates());
        assertEquals(10000, program.getCoursesToStates().size());
    }

    @Test
    public void testProgramConstructorWithVeryLongCourseIds() {
        courses.add(new Course("1".repeat(10000)));
        program = new Program(courses);
        assertNotNull(program.getCoursesToStates());
        assertEquals(1, program.getCoursesToStates().size());
    }

    @Test
    public void testProgramConstructorWithVeryShortCourseIds() {
        courses.add(new Course(""));
        program = new Program(courses);
        assertNotNull(program.getCoursesToStates());
        assertEquals(1, program.getCoursesToStates().size());
    }

    @Test
    public void testProgramConstructorWithSpecialCharacterCourseIds() {
        courses.add(new Course("@#$%^&*()"));
        program = new Program(courses);
        assertNotNull(program.getCoursesToStates());
        assertEquals(1, program.getCoursesToStates().size());
    }
}
