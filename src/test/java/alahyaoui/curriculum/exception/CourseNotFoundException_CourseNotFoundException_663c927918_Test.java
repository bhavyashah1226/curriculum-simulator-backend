/*
Test generated by RoostGPT for test javaUnitTest using AI Type Open AI and AI Model gpt-4

1. Scenario: Valid Course ID not found
   Description: To validate that the CourseNotFoundException function is working as expected, a course ID that doesn't exist in the database should be used. The function should return a message stating "Could not find course " followed by the invalid course ID.

2. Scenario: Null Course ID 
   Description: The function should be tested with a null course ID. The expected output should be "Could not find course null".

3. Scenario: Empty Course ID
   Description: An empty string should be passed as the course ID. The function should return "Could not find course " as the output.

4. Scenario: Special Characters in Course ID
   Description: The function should be tested with a course ID containing special characters. The function should return "Could not find course " followed by the special character string.

5. Scenario: Numeric Course ID not found
   Description: A numeric course ID that doesn't exist in the database should be passed. The function should return "Could not find course " followed by the numeric course ID.

6. Scenario: Alphanumeric Course ID not found
   Description: An alphanumeric course ID should be passed that doesn't exist in the database. The function should return "Could not find course " followed by the alphanumeric course ID.

7. Scenario: Course ID with Spaces not found
   Description: A course ID containing spaces should be passed that doesn't exist in the database. The function should return "Could not find course " followed by the course ID with spaces.

8. Scenario: Course ID with Case Sensitivity not found
   Description: The function should be tested with a course ID that is not found due to case sensitivity. The function should return "Could not find course " followed by the case sensitive course ID.  

9. Scenario: Long Course ID not found
   Description: The function should be tested with a long course ID that doesn't exist in the database. The function should return "Could not find course " followed by the long course ID.

10. Scenario: Short Course ID not found
    Description: The function should be tested with a short course ID that doesn't exist in the database. The function should return "Could not find course " followed by the short course ID.
*/
package alahyaoui.curriculum.exception;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class CourseNotFoundException_CourseNotFoundException_663c927918_Test {

    @Test
    public void testValidCourseIDNotFound() {
        String id = "testID";
        CourseNotFoundException ex = new CourseNotFoundException(id);
        assertEquals("Could not find course " + id, ex.getMessage());
    }

    @Test
    public void testNullCourseID() {
        String id = null;
        CourseNotFoundException ex = new CourseNotFoundException(id);
        assertEquals("Could not find course " + id, ex.getMessage());
    }

    @Test
    public void testEmptyCourseID() {
        String id = "";
        CourseNotFoundException ex = new CourseNotFoundException(id);
        assertEquals("Could not find course " + id, ex.getMessage());
    }

    @Test
    public void testSpecialCharactersInCourseID() {
        String id = "@#$%";
        CourseNotFoundException ex = new CourseNotFoundException(id);
        assertEquals("Could not find course " + id, ex.getMessage());
    }

    @Test
    public void testNumericCourseIDNotFound() {
        String id = "12345";
        CourseNotFoundException ex = new CourseNotFoundException(id);
        assertEquals("Could not find course " + id, ex.getMessage());
    }

    @Test
    public void testAlphanumericCourseIDNotFound() {
        String id = "test123";
        CourseNotFoundException ex = new CourseNotFoundException(id);
        assertEquals("Could not find course " + id, ex.getMessage());
    }

    @Test
    public void testCourseIDWithSpacesNotFound() {
        String id = "test ID";
        CourseNotFoundException ex = new CourseNotFoundException(id);
        assertEquals("Could not find course " + id, ex.getMessage());
    }

    @Test
    public void testCourseIDWithCaseSensitivityNotFound() {
        String id = "TestID";
        CourseNotFoundException ex = new CourseNotFoundException(id);
        assertEquals("Could not find course " + id, ex.getMessage());
    }

    @Test
    public void testLongCourseIDNotFound() {
        String id = "thisisaverylongcourseid";
        CourseNotFoundException ex = new CourseNotFoundException(id);
        assertEquals("Could not find course " + id, ex.getMessage());
    }

    @Test
    public void testShortCourseIDNotFound() {
        String id = "id";
        CourseNotFoundException ex = new CourseNotFoundException(id);
        assertEquals("Could not find course " + id, ex.getMessage());
    }
}
