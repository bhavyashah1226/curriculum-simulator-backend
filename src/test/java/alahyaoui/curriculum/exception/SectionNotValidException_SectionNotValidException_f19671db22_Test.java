/*
Test generated by RoostGPT for test javaUnitTest using AI Type Open AI and AI Model gpt-4

1. Scenario: Validate the error message when an invalid Section type is passed.
   Test Steps: 
   - Create a Section object with a type that is not MANAGEMENT, INDUSTRIAL or NETWORK.
   - Pass this object to the SectionNotValidException constructor.
   Expected Result: The exception message should correctly reflect the invalid value received.

2. Scenario: Validate the exception handling when a null value is passed.
   Test Steps: 
   - Pass a null value to the SectionNotValidException constructor.
   Expected Result: The exception message should correctly reflect that a null value was received.

3. Scenario: Validate the exception handling when a Section type is MANAGEMENT.
   Test Steps: 
   - Create a Section object with a type of MANAGEMENT.
   - Pass this object to the SectionNotValidException constructor.
   Expected Result: No exception should be thrown.

4. Scenario: Validate the exception handling when a Section type is INDUSTRIAL.
   Test Steps: 
   - Create a Section object with a type of INDUSTRIAL.
   - Pass this object to the SectionNotValidException constructor.
   Expected Result: No exception should be thrown.

5. Scenario: Validate the exception handling when a Section type is NETWORK.
   Test Steps: 
   - Create a Section object with a type of NETWORK.
   - Pass this object to the SectionNotValidException constructor.
   Expected Result: No exception should be thrown.

6. Scenario: Validate the exception handling when an empty Section object is passed.
   Test Steps: 
   - Create an empty Section object.
   - Pass this object to the SectionNotValidException constructor.
   Expected Result: The exception message should correctly reflect that an invalid value was received.

7. Scenario: Validate the exception handling when a Section object with an empty type is passed.
   Test Steps: 
   - Create a Section object with an empty type.
   - Pass this object to the SectionNotValidException constructor.
   Expected Result: The exception message should correctly reflect that an invalid value was received.
*/
package alahyaoui.curriculum.exception;

import alahyaoui.curriculum.model.Section;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public class SectionNotValidException_SectionNotValidException_f19671db22_Test {

    @Test
    public void testInvalidSectionType() {
        Section section = new Section();
        section.setType("INVALID");

        SectionNotValidException exception = new SectionNotValidException(section);
        Assertions.assertEquals("Section must be either MANAGEMENT, INDUSTRIAL and NETWORK value received: INVALID", exception.getMessage());
    }

    @Test
    public void testNullSection() {
        SectionNotValidException exception = new SectionNotValidException(null);
        Assertions.assertEquals("Section must be either MANAGEMENT, INDUSTRIAL and NETWORK value received: null", exception.getMessage());
    }

    @Test
    public void testValidSectionTypeManagement() {
        Section section = new Section();
        section.setType("MANAGEMENT");

        SectionNotValidException exception = new SectionNotValidException(section);
        Assertions.assertEquals("Section must be either MANAGEMENT, INDUSTRIAL and NETWORK value received: MANAGEMENT", exception.getMessage());
    }

    @Test
    public void testValidSectionTypeIndustrial() {
        Section section = new Section();
        section.setType("INDUSTRIAL");

        SectionNotValidException exception = new SectionNotValidException(section);
        Assertions.assertEquals("Section must be either MANAGEMENT, INDUSTRIAL and NETWORK value received: INDUSTRIAL", exception.getMessage());
    }

    @Test
    public void testValidSectionTypeNetwork() {
        Section section = new Section();
        section.setType("NETWORK");

        SectionNotValidException exception = new SectionNotValidException(section);
        Assertions.assertEquals("Section must be either MANAGEMENT, INDUSTRIAL and NETWORK value received: NETWORK", exception.getMessage());
    }

    @Test
    public void testEmptySection() {
        Section section = new Section();

        SectionNotValidException exception = new SectionNotValidException(section);
        Assertions.assertEquals("Section must be either MANAGEMENT, INDUSTRIAL and NETWORK value received: ", exception.getMessage());
    }

    @Test
    public void testSectionWithEmptyType() {
        Section section = new Section();
        section.setType("");

        SectionNotValidException exception = new SectionNotValidException(section);
        Assertions.assertEquals("Section must be either MANAGEMENT, INDUSTRIAL and NETWORK value received: ", exception.getMessage());
    }
}
